{"version":3,"sources":["Images/skin.jpg","Images/Tuberculosis.jpg","Images/Pneumonia.jpg","Images/retinopathy.jpg","Images/Malaria.jpg","Images/logo.jpeg","components/Cards.js","components/Description.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cards","class","src","skin","alt","className","href","tuber","Pneumonia","retina","Malaria","Description","App","logo","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,oSCoE5BC,EA5DD,WACb,OACG,6BAASC,MAAM,kBACX,yBAAKA,MAAM,aACX,sDACE,6BAASA,MAAM,gBACb,0BAAMA,MAAM,SAAQ,yBAAKC,IAAKC,IAAMC,IAAI,MACxC,yBAAKH,MAAM,WACT,2CACA,yMACA,uBAAGI,UAAU,aACZ,uBAAGC,KAAK,sBAAR,iBAIL,6BAASL,MAAM,iBACb,0BAAMA,MAAM,SAAQ,yBAAKC,IAAKK,IAAOH,IAAI,MACzC,yBAAKH,MAAM,WACT,4CACA,yMACA,uBAAGI,UAAU,aACZ,uBAAGC,KAAK,SAAR,iBAIL,6BAASL,MAAM,gBACb,0BAAMA,MAAM,SAAQ,yBAAKC,IAAKM,IAAWJ,IAAI,MAC7C,yBAAKH,MAAM,WACT,yCACA,yMACA,uBAAGI,UAAU,aACZ,uBAAGC,KAAK,SAAR,iBAIL,6BAASL,MAAM,iBACb,0BAAMA,MAAM,SAAQ,yBAAKC,IAAKO,IAAQL,IAAI,MAC1C,yBAAKH,MAAM,WACT,2CACA,yMACA,uBAAGI,UAAU,aACZ,uBAAGC,KAAK,SAAR,iBAIL,6BAASL,MAAM,gBACb,0BAAMA,MAAM,SAAQ,yBAAKC,IAAKQ,IAASN,IAAI,MAC3C,yBAAKH,MAAM,WACT,uCACA,yMACA,uBAAGI,UAAU,aACZ,uBAAGC,KAAK,SAAR,oBC/CAK,EAVK,WACnB,OACW,yBAAKN,UAAU,SACb,yBAAKA,UAAU,iBACb,4CAAiB,6BAAjB,YACA,uBAAGA,UAAU,OAAb,+CAA+D,6BAA/D,+DAAgI,6BAAhI,yBAFF,oB,yBCaCO,E,uKAVb,OACE,yBAAKP,UAAU,OACb,uBAAGC,KAAK,KAAKD,UAAU,WAAU,yBAAKA,UAAU,OAAOH,IAAKW,IAAMT,IAAI,UACtE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANYU,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cfe8398f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/skin.774f9092.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Tuberculosis.053c0011.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Pneumonia.9370e78c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/retinopathy.c7683dbc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Malaria.1e9efde8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.840a5b7e.jpeg\";","import React from 'react';\r\nimport '../CSS/Card.css';\r\nimport skin from '../Images/skin.jpg';\r\nimport tuber from '../Images/Tuberculosis.jpg';\r\nimport Pneumonia from '../Images/Pneumonia.jpg';\r\nimport retina from '../Images/retinopathy.jpg';\r\nimport Malaria from '../Images/Malaria.jpg';\r\n\r\nconst Cards = () => {\r\n\treturn(\r\n    <section class=\"wrapper style1\">\r\n        <div class=\"inner z-2\">\r\n        <h1>Topic btao yha paas ka</h1>\r\n          <article class=\"feature left\">\r\n            <span class=\"image\"><img src={skin} alt=\"\" /></span>\r\n            <div class=\"content\">\r\n              <h1>Skin Cancer</h1>\r\n              <p>Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est.</p>\r\n              <p className=\"read-more\">\r\n               <a href=\"https:medinform.tk\">Go to Page</a>\r\n              </p>\r\n            </div>\r\n          </article>\r\n          <article class=\"feature right\">\r\n            <span class=\"image\"><img src={tuber} alt=\"\" /></span>\r\n            <div class=\"content\">\r\n              <h1>Tuberculosis</h1>\r\n              <p>Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est.</p>\r\n              <p className=\"read-more\">\r\n               <a href=\"#skin\">Go to Page</a>\r\n              </p>\r\n            </div>\r\n          </article>\r\n          <article class=\"feature left\">\r\n            <span class=\"image\"><img src={Pneumonia} alt=\"\" /></span>\r\n            <div class=\"content\">\r\n              <h1>Pneumonia</h1>\r\n              <p>Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est.</p>\r\n              <p className=\"read-more\">\r\n               <a href=\"#skin\">Go to Page</a>\r\n              </p>\r\n            </div>\r\n          </article>\r\n          <article class=\"feature right\">\r\n            <span class=\"image\"><img src={retina} alt=\"\" /></span>\r\n            <div class=\"content\">\r\n              <h1>Retinopathy</h1>\r\n              <p>Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est.</p>\r\n              <p className=\"read-more\">\r\n               <a href=\"#skin\">Go to Page</a>\r\n              </p>\r\n            </div>\r\n          </article>\r\n          <article class=\"feature left\">\r\n            <span class=\"image\"><img src={Malaria} alt=\"\" /></span>\r\n            <div class=\"content\">\r\n              <h1>Malaria</h1>\r\n              <p>Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est.</p>\r\n              <p className=\"read-more\">\r\n               <a href=\"#skin\">Go to Page</a>\r\n              </p>\r\n            </div>\r\n          </article>\r\n        </div>\r\n      </section>\r\n\t);\r\n}\r\n\r\nexport default Cards;","import React from 'react';\r\n\r\nconst Description = () => {\r\n\treturn(\r\n            <div className=\"intro\">\r\n              <div className=\"intro--banner\">\r\n                <h1>Medical Image<br/>Analysis</h1>\r\n                <p className=\"z-1\">gdvcgdv jcbdhvbsjh vsdhbcdhbsvj sv shvbhjbsv<br/> shsbdchsdn vsnvbhsdbv dsnvkshbchjs nvsydvhj sn vysgydfbnlka<br/> fsuifeh s,vs ecsbebk</p>              </div>\r\n            </div>\r\n\t); \r\n}\r\n\r\nexport default Description;","import React , {Component} from 'react';\nimport Cards from './components/Cards';\nimport Description from './components/Description';\nimport './CSS/App.css';\nimport logo from './Images/logo.jpeg';\n\nclass App extends Component{\n  render(){\n  return (\n    <div className=\"App\">\n      <a href='#0' className=\"pointer\"><img className=\"logo\" src={logo} alt='logo'/></a>\n      <Description />\n      <Cards />\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './CSS/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}